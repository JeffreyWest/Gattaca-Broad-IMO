% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Dendro_funcs.R
\name{plot_evogram}
\alias{plot_evogram}
\title{plot_evogram
Plot dendrogram}
\usage{
plot_evogram(dendro_pos_df, link_df, fill_range = NULL, node_size = 5,
  scale_by_node_size = TRUE, orientation = "td", depth = "origin")
}
\arguments{
\item{dendro_pos_df}{Position of nodes returned by \code{\link{get_evogram}}}

\item{link_df}{Position of edges returned by \code{\link{get_evogram}}}

\item{fill_range}{Array containing the minimum and maximum values to set the range of colors. If NULL (the default), the range is determined directly from \code{fill_value}.}

\item{node_size}{Determines the size of nodes if \code{scale_by_node_size} is FALSE}

\item{scale_by_node_size}{Boolean defining if the size of each node should be proportional to its frequency. If FALSE, then all nodes have the same size, determined by \code{node_size}}

\item{orientation}{Defines orientation of the tree: "td" draws it top-down, "lr" draws it left-right}

\item{depth}{Determines the y-position of the nodes: "level" places the nodes based on how deeply they are nested in the tree, "origin" makes the y-position the same as the clone's origin time, "bottom" positions nodes so that all leaves have the same position, furthest from the root}
}
\value{
a ggplot object to plot the tree
}
\description{
plot_evogram
Plot dendrogram
}
\examples{
data("example.easy.wide")
### Split dataframe into clone info and size info using fact timepoint column names can be converted to numeric values
time_col_idx <- suppressWarnings(which(! is.na(as.numeric(colnames(example.easy.wide)))))
attribute_col_idx <- suppressWarnings(which(is.na(as.numeric(colnames(example.easy.wide)))))

size_df <- example.easy.wide[, time_col_idx]
parents <- example.easy.wide$parent
clones <- example.easy.wide$clone

tree_info <- get_evogram(size_df, parents = parents, clones = clones)
tree_pos <- tree_info$dendro_pos
elbow_links <- tree_info$links
tree_p <- plot_evogram(tree_pos, elbow_links)

### Can also plot with elbow links
tree_info <- get_evogram(size_df, parents = parents, clones = clones, link_type = "straight")
tree_pos <- tree_info$dendro_pos
straight_links <- tree_info$links
tree_straight_p <- plot_evogram(tree_pos, straight_links)

### Default is for y to show time of clonal origin , all leaves can be at the highest level
elbow_bottom_p <- plot_evogram(tree_pos, elbow_links, depth = "bottom")
### Can view left to right by changing orientation argument
lr_tree_elbow_p <- plot_evogram(tree_pos, elbow_links, orientation = "lr")
#' ### Can color using attributes
data("example.easy.wide.with.attributes")
### Split dataframe into clone info and size info using fact timepoint column names can be converted to numeric values
time_col_idx <- suppressWarnings(which(! is.na(as.numeric(colnames(example.easy.wide.with.attributes)))))
attribute_col_idx <- suppressWarnings(which(is.na(as.numeric(colnames(example.easy.wide.with.attributes)))))
attr_size_df <- example.easy.wide.with.attributes[, time_col_idx]
attr_parents <- example.easy.wide.with.attributes$parent
attr_clones <- example.easy.wide.with.attributes$clone
fitness <- example.easy.wide.with.attributes$fitness
#' ### Can set color using attributes. Default colormap is viridis, but can be changed to any colormap available in the colormaps package. For a list of available colormaps, see https://github.com/bhaskarvk/colormap
attribute_dendro_df <- get_evogram(attr_size_df, attr_clones, attr_parents, fill_value = fitness)
attribute_tree_pos <- attribute_dendro_df$dendro_pos
attribute_elbow_links <- attribute_dendro_df$links
attribute_tree_elbow_p <- plot_evogram(attribute_tree_pos, attribute_elbow_links)
}
